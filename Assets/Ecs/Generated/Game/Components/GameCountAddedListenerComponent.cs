//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public CountAddedListenerComponent CountAddedListener { get { return (CountAddedListenerComponent)GetComponent(GameComponentsLookup.CountAddedListener); } }
	public bool HasCountAddedListener { get { return HasComponent(GameComponentsLookup.CountAddedListener); } }

	public void AddCountAddedListener(System.Collections.Generic.List<ICountAddedListener> newValue)
	{
		var index = GameComponentsLookup.CountAddedListener;
		var component = (CountAddedListenerComponent)CreateComponent(index, typeof(CountAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		AddComponent(index, component);
	}

	public void ReplaceCountAddedListener(System.Collections.Generic.List<ICountAddedListener> newValue)
	{
		var index = GameComponentsLookup.CountAddedListener;
		var component = (CountAddedListenerComponent)CreateComponent(index, typeof(CountAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		ReplaceComponent(index, component);
	}

	public void CopyCountAddedListenerTo(CountAddedListenerComponent copyComponent)
	{
		var index = GameComponentsLookup.CountAddedListener;
		var component = (CountAddedListenerComponent)CreateComponent(index, typeof(CountAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = copyComponent.value;
		#endif
		ReplaceComponent(index, component);
	}

	public void RemoveCountAddedListener()
	{
		RemoveComponent(GameComponentsLookup.CountAddedListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity : ICountAddedListenerEntity { }

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher
{
	static JCMG.EntitasRedux.IMatcher<GameEntity> _matcherCountAddedListener;

	public static JCMG.EntitasRedux.IMatcher<GameEntity> CountAddedListener
	{
		get
		{
			if (_matcherCountAddedListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<GameEntity>)JCMG.EntitasRedux.Matcher<GameEntity>.AllOf(GameComponentsLookup.CountAddedListener);
				matcher.ComponentNames = GameComponentsLookup.ComponentNames;
				_matcherCountAddedListener = matcher;
			}

			return _matcherCountAddedListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public void AddCountAddedListener(ICountAddedListener value)
	{
		var listeners = HasCountAddedListener
			? CountAddedListener.value
			: new System.Collections.Generic.List<ICountAddedListener>();
		listeners.Add(value);
		ReplaceCountAddedListener(listeners);
	}

	public void RemoveCountAddedListener(ICountAddedListener value, bool removeComponentWhenEmpty = true)
	{
		var listeners = CountAddedListener.value;
		listeners.Remove(value);
		if (removeComponentWhenEmpty && listeners.Count == 0)
		{
			RemoveCountAddedListener();
		}
		else
		{
			ReplaceCountAddedListener(listeners);
		}
	}
}
