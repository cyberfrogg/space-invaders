//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public ScoreIndicatorAddedListenerComponent ScoreIndicatorAddedListener { get { return (ScoreIndicatorAddedListenerComponent)GetComponent(GameComponentsLookup.ScoreIndicatorAddedListener); } }
	public bool HasScoreIndicatorAddedListener { get { return HasComponent(GameComponentsLookup.ScoreIndicatorAddedListener); } }

	public void AddScoreIndicatorAddedListener(System.Collections.Generic.List<IScoreIndicatorAddedListener> newValue)
	{
		var index = GameComponentsLookup.ScoreIndicatorAddedListener;
		var component = (ScoreIndicatorAddedListenerComponent)CreateComponent(index, typeof(ScoreIndicatorAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		AddComponent(index, component);
	}

	public void ReplaceScoreIndicatorAddedListener(System.Collections.Generic.List<IScoreIndicatorAddedListener> newValue)
	{
		var index = GameComponentsLookup.ScoreIndicatorAddedListener;
		var component = (ScoreIndicatorAddedListenerComponent)CreateComponent(index, typeof(ScoreIndicatorAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		ReplaceComponent(index, component);
	}

	public void CopyScoreIndicatorAddedListenerTo(ScoreIndicatorAddedListenerComponent copyComponent)
	{
		var index = GameComponentsLookup.ScoreIndicatorAddedListener;
		var component = (ScoreIndicatorAddedListenerComponent)CreateComponent(index, typeof(ScoreIndicatorAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = copyComponent.value;
		#endif
		ReplaceComponent(index, component);
	}

	public void RemoveScoreIndicatorAddedListener()
	{
		RemoveComponent(GameComponentsLookup.ScoreIndicatorAddedListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity : IScoreIndicatorAddedListenerEntity { }

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher
{
	static JCMG.EntitasRedux.IMatcher<GameEntity> _matcherScoreIndicatorAddedListener;

	public static JCMG.EntitasRedux.IMatcher<GameEntity> ScoreIndicatorAddedListener
	{
		get
		{
			if (_matcherScoreIndicatorAddedListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<GameEntity>)JCMG.EntitasRedux.Matcher<GameEntity>.AllOf(GameComponentsLookup.ScoreIndicatorAddedListener);
				matcher.ComponentNames = GameComponentsLookup.ComponentNames;
				_matcherScoreIndicatorAddedListener = matcher;
			}

			return _matcherScoreIndicatorAddedListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public void AddScoreIndicatorAddedListener(IScoreIndicatorAddedListener value)
	{
		var listeners = HasScoreIndicatorAddedListener
			? ScoreIndicatorAddedListener.value
			: new System.Collections.Generic.List<IScoreIndicatorAddedListener>();
		listeners.Add(value);
		ReplaceScoreIndicatorAddedListener(listeners);
	}

	public void RemoveScoreIndicatorAddedListener(IScoreIndicatorAddedListener value, bool removeComponentWhenEmpty = true)
	{
		var listeners = ScoreIndicatorAddedListener.value;
		listeners.Remove(value);
		if (removeComponentWhenEmpty && listeners.Count == 0)
		{
			RemoveScoreIndicatorAddedListener();
		}
		else
		{
			ReplaceScoreIndicatorAddedListener(listeners);
		}
	}
}
