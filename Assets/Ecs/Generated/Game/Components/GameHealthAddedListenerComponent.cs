//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public HealthAddedListenerComponent HealthAddedListener { get { return (HealthAddedListenerComponent)GetComponent(GameComponentsLookup.HealthAddedListener); } }
	public bool HasHealthAddedListener { get { return HasComponent(GameComponentsLookup.HealthAddedListener); } }

	public void AddHealthAddedListener(System.Collections.Generic.List<IHealthAddedListener> newValue)
	{
		var index = GameComponentsLookup.HealthAddedListener;
		var component = (HealthAddedListenerComponent)CreateComponent(index, typeof(HealthAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		AddComponent(index, component);
	}

	public void ReplaceHealthAddedListener(System.Collections.Generic.List<IHealthAddedListener> newValue)
	{
		var index = GameComponentsLookup.HealthAddedListener;
		var component = (HealthAddedListenerComponent)CreateComponent(index, typeof(HealthAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		ReplaceComponent(index, component);
	}

	public void CopyHealthAddedListenerTo(HealthAddedListenerComponent copyComponent)
	{
		var index = GameComponentsLookup.HealthAddedListener;
		var component = (HealthAddedListenerComponent)CreateComponent(index, typeof(HealthAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = copyComponent.value;
		#endif
		ReplaceComponent(index, component);
	}

	public void RemoveHealthAddedListener()
	{
		RemoveComponent(GameComponentsLookup.HealthAddedListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity : IHealthAddedListenerEntity { }

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher
{
	static JCMG.EntitasRedux.IMatcher<GameEntity> _matcherHealthAddedListener;

	public static JCMG.EntitasRedux.IMatcher<GameEntity> HealthAddedListener
	{
		get
		{
			if (_matcherHealthAddedListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<GameEntity>)JCMG.EntitasRedux.Matcher<GameEntity>.AllOf(GameComponentsLookup.HealthAddedListener);
				matcher.ComponentNames = GameComponentsLookup.ComponentNames;
				_matcherHealthAddedListener = matcher;
			}

			return _matcherHealthAddedListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public void AddHealthAddedListener(IHealthAddedListener value)
	{
		var listeners = HasHealthAddedListener
			? HealthAddedListener.value
			: new System.Collections.Generic.List<IHealthAddedListener>();
		listeners.Add(value);
		ReplaceHealthAddedListener(listeners);
	}

	public void RemoveHealthAddedListener(IHealthAddedListener value, bool removeComponentWhenEmpty = true)
	{
		var listeners = HealthAddedListener.value;
		listeners.Remove(value);
		if (removeComponentWhenEmpty && listeners.Count == 0)
		{
			RemoveHealthAddedListener();
		}
		else
		{
			ReplaceHealthAddedListener(listeners);
		}
	}
}
