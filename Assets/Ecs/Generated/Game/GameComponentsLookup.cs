//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using JCMG.EntitasRedux;

public static class GameComponentsLookup
{
	public const int AnyActiveBulletTypeAddedListener = 0;
	public const int AnyTotalScoreAddedListener = 1;
	public const int CountAddedListener = 2;
	public const int CountRemovedListener = 3;
	public const int DeadAddedListener = 4;
	public const int DeadRemovedListener = 5;
	public const int Destroyed = 6;
	public const int ObjectType = 7;
	public const int ActiveBulletType = 8;
	public const int Bullet = 9;
	public const int Camera = 10;
	public const int Count = 11;
	public const int Dead = 12;
	public const int Enemy = 13;
	public const int EnemyParameters = 14;
	public const int Health = 15;
	public const int Instantiate = 16;
	public const int Link = 17;
	public const int LocalPosition = 18;
	public const int LookDirection = 19;
	public const int LookPoint = 20;
	public const int Owner = 21;
	public const int Player = 22;
	public const int PlayerParameters = 23;
	public const int Position = 24;
	public const int Prefab = 25;
	public const int Rotation = 26;
	public const int ScoreIndicator = 27;
	public const int TotalScore = 28;
	public const int Transform = 29;
	public const int Uid = 30;
	public const int Velocity = 31;
	public const int GameDestroyedAddedListener = 32;
	public const int HealthAddedListener = 33;
	public const int HealthRemovedListener = 34;
	public const int LinkRemovedListener = 35;
	public const int LocalPositionAddedListener = 36;
	public const int ObjectTypeAddedListener = 37;
	public const int PositionAddedListener = 38;
	public const int RotationAddedListener = 39;
	public const int ScoreIndicatorAddedListener = 40;
	public const int VelocityAddedListener = 41;

	public const int TotalComponents = 42;

	public static readonly string[] ComponentNames =
	{
		"AnyActiveBulletTypeAddedListener",
		"AnyTotalScoreAddedListener",
		"CountAddedListener",
		"CountRemovedListener",
		"DeadAddedListener",
		"DeadRemovedListener",
		"Destroyed",
		"ObjectType",
		"ActiveBulletType",
		"Bullet",
		"Camera",
		"Count",
		"Dead",
		"Enemy",
		"EnemyParameters",
		"Health",
		"Instantiate",
		"Link",
		"LocalPosition",
		"LookDirection",
		"LookPoint",
		"Owner",
		"Player",
		"PlayerParameters",
		"Position",
		"Prefab",
		"Rotation",
		"ScoreIndicator",
		"TotalScore",
		"Transform",
		"Uid",
		"Velocity",
		"GameDestroyedAddedListener",
		"HealthAddedListener",
		"HealthRemovedListener",
		"LinkRemovedListener",
		"LocalPositionAddedListener",
		"ObjectTypeAddedListener",
		"PositionAddedListener",
		"RotationAddedListener",
		"ScoreIndicatorAddedListener",
		"VelocityAddedListener"
	};

	public static readonly System.Type[] ComponentTypes =
	{
		typeof(AnyActiveBulletTypeAddedListenerComponent),
		typeof(AnyTotalScoreAddedListenerComponent),
		typeof(CountAddedListenerComponent),
		typeof(CountRemovedListenerComponent),
		typeof(DeadAddedListenerComponent),
		typeof(DeadRemovedListenerComponent),
		typeof(Ecs.Common.Components.DestroyedComponent),
		typeof(Ecs.Common.Components.ObjectTypeComponent),
		typeof(Ecs.Game.Components.ActiveBulletTypeComponent),
		typeof(Ecs.Game.Components.BulletComponent),
		typeof(Ecs.Game.Components.CameraComponent),
		typeof(Ecs.Game.Components.CountComponent),
		typeof(Ecs.Game.Components.DeadComponent),
		typeof(Ecs.Game.Components.EnemyComponent),
		typeof(Ecs.Game.Components.EnemyParametersComponent),
		typeof(Ecs.Game.Components.HealthComponent),
		typeof(Ecs.Game.Components.InstantiateComponent),
		typeof(Ecs.Game.Components.LinkComponent),
		typeof(Ecs.Game.Components.LocalPositionComponent),
		typeof(Ecs.Game.Components.LookDirectionComponent),
		typeof(Ecs.Game.Components.LookPointComponent),
		typeof(Ecs.Game.Components.OwnerComponent),
		typeof(Ecs.Game.Components.PlayerComponent),
		typeof(Ecs.Game.Components.PlayerParametersComponent),
		typeof(Ecs.Game.Components.PositionComponent),
		typeof(Ecs.Game.Components.PrefabComponent),
		typeof(Ecs.Game.Components.RotationComponent),
		typeof(Ecs.Game.Components.ScoreIndicatorComponent),
		typeof(Ecs.Game.Components.TotalScoreComponent),
		typeof(Ecs.Game.Components.TransformComponent),
		typeof(Ecs.Game.Components.UidComponent),
		typeof(Ecs.Game.Components.VelocityComponent),
		typeof(GameDestroyedAddedListenerComponent),
		typeof(HealthAddedListenerComponent),
		typeof(HealthRemovedListenerComponent),
		typeof(LinkRemovedListenerComponent),
		typeof(LocalPositionAddedListenerComponent),
		typeof(ObjectTypeAddedListenerComponent),
		typeof(PositionAddedListenerComponent),
		typeof(RotationAddedListenerComponent),
		typeof(ScoreIndicatorAddedListenerComponent),
		typeof(VelocityAddedListenerComponent)
	};

	public static readonly Dictionary<Type, int> ComponentTypeToIndex = new Dictionary<Type, int>
	{
		{ typeof(AnyActiveBulletTypeAddedListenerComponent), 0 },
		{ typeof(AnyTotalScoreAddedListenerComponent), 1 },
		{ typeof(CountAddedListenerComponent), 2 },
		{ typeof(CountRemovedListenerComponent), 3 },
		{ typeof(DeadAddedListenerComponent), 4 },
		{ typeof(DeadRemovedListenerComponent), 5 },
		{ typeof(Ecs.Common.Components.DestroyedComponent), 6 },
		{ typeof(Ecs.Common.Components.ObjectTypeComponent), 7 },
		{ typeof(Ecs.Game.Components.ActiveBulletTypeComponent), 8 },
		{ typeof(Ecs.Game.Components.BulletComponent), 9 },
		{ typeof(Ecs.Game.Components.CameraComponent), 10 },
		{ typeof(Ecs.Game.Components.CountComponent), 11 },
		{ typeof(Ecs.Game.Components.DeadComponent), 12 },
		{ typeof(Ecs.Game.Components.EnemyComponent), 13 },
		{ typeof(Ecs.Game.Components.EnemyParametersComponent), 14 },
		{ typeof(Ecs.Game.Components.HealthComponent), 15 },
		{ typeof(Ecs.Game.Components.InstantiateComponent), 16 },
		{ typeof(Ecs.Game.Components.LinkComponent), 17 },
		{ typeof(Ecs.Game.Components.LocalPositionComponent), 18 },
		{ typeof(Ecs.Game.Components.LookDirectionComponent), 19 },
		{ typeof(Ecs.Game.Components.LookPointComponent), 20 },
		{ typeof(Ecs.Game.Components.OwnerComponent), 21 },
		{ typeof(Ecs.Game.Components.PlayerComponent), 22 },
		{ typeof(Ecs.Game.Components.PlayerParametersComponent), 23 },
		{ typeof(Ecs.Game.Components.PositionComponent), 24 },
		{ typeof(Ecs.Game.Components.PrefabComponent), 25 },
		{ typeof(Ecs.Game.Components.RotationComponent), 26 },
		{ typeof(Ecs.Game.Components.ScoreIndicatorComponent), 27 },
		{ typeof(Ecs.Game.Components.TotalScoreComponent), 28 },
		{ typeof(Ecs.Game.Components.TransformComponent), 29 },
		{ typeof(Ecs.Game.Components.UidComponent), 30 },
		{ typeof(Ecs.Game.Components.VelocityComponent), 31 },
		{ typeof(GameDestroyedAddedListenerComponent), 32 },
		{ typeof(HealthAddedListenerComponent), 33 },
		{ typeof(HealthRemovedListenerComponent), 34 },
		{ typeof(LinkRemovedListenerComponent), 35 },
		{ typeof(LocalPositionAddedListenerComponent), 36 },
		{ typeof(ObjectTypeAddedListenerComponent), 37 },
		{ typeof(PositionAddedListenerComponent), 38 },
		{ typeof(RotationAddedListenerComponent), 39 },
		{ typeof(ScoreIndicatorAddedListenerComponent), 40 },
		{ typeof(VelocityAddedListenerComponent), 41 }
	};

	/// <summary>
	/// Returns a component index based on the passed <paramref name="component"/> type; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="component"></param>
	public static int GetComponentIndex(IComponent component)
	{
		return GetComponentIndex(component.GetType());
	}

	/// <summary>
	/// Returns a component index based on the passed <paramref name="componentType"/>; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="componentType"></param>
	public static int GetComponentIndex(Type componentType)
	{
		return ComponentTypeToIndex.TryGetValue(componentType, out var index) ? index : -1;
	}
}
